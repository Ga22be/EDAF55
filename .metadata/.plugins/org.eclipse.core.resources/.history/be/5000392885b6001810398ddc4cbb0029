package buffer;

import java.util.LinkedList;

import se.lth.cs.realtime.semaphore.CountingSem;
import se.lth.cs.realtime.semaphore.MutexSem;
import se.lth.cs.realtime.semaphore.Semaphore;

/**
 * The buffer.
 */
class Buffer {
	Semaphore mutex; // For mutual exclusion blocking.
	Semaphore free; // For buffer full blocking.
	Semaphore avail; // For blocking when no data is available.
	String buffData = ""; // The actual buffer.
	LinkedList<String> buffer = new LinkedList<String>();

	Buffer() {
		mutex = new MutexSem();
		free = new CountingSem(8);
		avail = new CountingSem();
	}

	void putLine(String input) {
		free.take(); // Wait for buffer empty.
		mutex.take(); // Wait for exclusive access.

		//		buffData = new String(input); // Store copy of object.

		buffer.add(input);
		mutex.give(); // Allow others to access.
		avail.give(); // Allow others to get line.
	}

	String getLine() {
		// Exercise 2 ...
		// Here you should add code so that if the buffer is empty, the
		// calling process is delayed until a line becomes available.
		// A caller of putLine hanging on buffer full should be released.
		// ...
		avail.take();
		mutex.take();
//		String buffCpy = new String(buffData);
		
		String buffCpy = buffer.poll();
		
		mutex.give();
		free.give();
		return buffCpy;
	}
}
